# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy PHP app to Azure Web App - VocabularyBuilding

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
        env:
          update: true

      - name: Check PHP version
        run: php -v

      - name: Update Composer
        run: composer self-update --2

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Node.js dependencies
        run: |
          rm -rf node_modules
          npm ci

      - name: Clean & Build React app
        run: |
          rm -rf public/build
          npm run build

      - name: Create deployment package
        run: |
          rm -rf node_modules
          zip -r release.zip . -x "*.git*" "node_modules/*" "tests/*" "storage/framework/cache/*" "storage/framework/sessions/*" "storage/framework/views/*"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: php-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      contents: read
      id-token: write

    steps:
          
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: php-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Check deployment package size
        run: |
          du -sh .
          find . -type f | wc -l

      - name: Setup PHP for deployment
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Create .env file
        run: |
          echo "LOG_CHANNEL=stack" >> .env
          echo "LOG_LEVEL=debug" >> .env
          # 他の必要な環境変数も追加

      - name: Set storage permissions
        run: |
          chmod -R 775 storage
          chmod -R 775 bootstrap/cache

      - name: Set up environment variables
        run: |
          echo "APP_ENV=production" >> .env
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "APP_DEBUG=false" >> .env
          echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> $GITHUB_ENV
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          cat .env
        
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_EFD747454B3F4FA1A7F4B56730782DDB }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_C3C0316F42DA4B9190486306EE9A56EC }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_74A320CC9E7942818F953D1BCEC74478 }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'VocabularyBuilding'
          slot-name: 'Production'
          package: .
          clean: true  # デプロイ前にクリーンアップを実行

      - name: List all environment variables
        run: env | sort

      - name: Test database connection
        env:
          DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_ATTR_SSL_CA: ${{ secrets.MYSQL_ATTR_SSL_CA }}
        run: |
          php -r "
            \$host = getenv('DB_HOST');
            \$port = getenv('DB_PORT');
            \$db   = getenv('DB_DATABASE');
            \$user = getenv('DB_USERNAME');
            \$pass = getenv('DB_PASSWORD');
            \$ssl_ca = getenv('MYSQL_ATTR_SSL_CA');

            try {
              \$dsn = \"mysql:host=\$host;port=\$port;dbname=\$db\";
              \$options = [
                PDO::MYSQL_ATTR_SSL_CA => \$ssl_ca,
              ];
              \$pdo = new PDO(\$dsn, \$user, \$pass, \$options);
              echo 'Connected successfully';
            } catch (PDOException \$e) {
              echo 'Connection failed: ' . \$e->getMessage();
            }
          "

      - name: Run migrations and seed database
        env:
          DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_ATTR_SSL_CA: ${{ secrets.MYSQL_ATTR_SSL_CA }}

        run: |
          php artisan cache:clear
          php artisan config:clear
          php artisan migrate --force
          php artisan db:seed --force